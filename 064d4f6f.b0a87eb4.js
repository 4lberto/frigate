(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{64:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return l})),a.d(t,"toc",(function(){return s})),a.d(t,"default",(function(){return c}));var n=a(3),r=a(7),i=(a(0),a(99)),o={id:"home-assistant",title:"Integration with Home Assistant",sidebar_label:"Home Assistant"},l={unversionedId:"usage/home-assistant",id:"usage/home-assistant",isDocsHomePage:!1,title:"Integration with Home Assistant",description:"The best way to integrate with Home Assistant is to use the official integration.",source:"@site/docs/usage/home-assistant.md",slug:"/usage/home-assistant",permalink:"/frigate/usage/home-assistant",editUrl:"https://github.com/blakeblackshear/frigate/edit/master/docs/docs/usage/home-assistant.md",version:"current",sidebar_label:"Home Assistant",sidebar:"docs",previous:{title:"Advanced",permalink:"/frigate/configuration/advanced"},next:{title:"Web Interface",permalink:"/frigate/usage/web"}},s=[{value:"Installation",id:"installation",children:[]},{value:"Configuration",id:"configuration",children:[]},{value:"Entities Provided",id:"entities-provided",children:[]},{value:"Media Browser Support",id:"media-browser-support",children:[{value:"Notifications",id:"notifications",children:[]}]},{value:"Multiple Instance Support",id:"multiple-instance-support",children:[{value:"Requirements for Multiple Instances",id:"requirements-for-multiple-instances",children:[]}]}],b={toc:s};function c(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},b,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"The best way to integrate with Home Assistant is to use the ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/blakeblackshear/frigate-hass-integration"}),"official integration"),"."),Object(i.b)("h2",{id:"installation"},"Installation"),Object(i.b)("p",null,"Available via HACS as a ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://hacs.xyz/docs/faq/custom_repositories"}),"custom repository"),". To install:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Add the custom repository:")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"Home Assistant > HACS > Integrations > [...] > Custom Repositories\n")),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Key"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Value"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Repository URL"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("a",Object(n.a)({parentName:"td"},{href:"https://github.com/blakeblackshear/frigate-hass-integration"}),"https://github.com/blakeblackshear/frigate-hass-integration"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Category"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Integration")))),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Use ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://hacs.xyz/"}),"HACS")," to install the integration:")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),'Home Assistant > HACS > Integrations > "Explore & Add Integrations" > Frigate\n')),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Restart Home Assistant."),Object(i.b)("li",{parentName:"ul"},"Then add/configure the integration:")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"Home Assistant > Configuration > Integrations > Add Integration > Frigate\n")),Object(i.b)("p",null,"Note: You will also need\n",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.home-assistant.io/integrations/media_source/"}),"media_source")," enabled\nin your Home Assistant configuration for the Media Browser to appear."),Object(i.b)("h2",{id:"configuration"},"Configuration"),Object(i.b)("p",null,"When configuring the integration, you will be asked for the following parameters:"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Variable"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"URL"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The ",Object(i.b)("inlineCode",{parentName:"td"},"URL")," of your frigate instance, the URL you use to access Frigate in the browser. This may look like ",Object(i.b)("inlineCode",{parentName:"td"},"http://<host>:5000/"),". If you are using HassOS with the addon, the URL should be ",Object(i.b)("inlineCode",{parentName:"td"},"http://ccab4aaf-frigate:5000")," (or ",Object(i.b)("inlineCode",{parentName:"td"},"http://ccab4aaf-frigate-beta:5000")," if your are using the beta version of the addon). Live streams required port 1935, see ",Object(i.b)("a",Object(n.a)({parentName:"td"},{href:"#streams"}),"RTMP streams"))))),Object(i.b)("a",{name:"options"}),"## Options",Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"Home Assistant > Configuration > Integrations > Frigate > Options\n")),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Option"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"RTMP URL Template"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"A ",Object(i.b)("a",Object(n.a)({parentName:"td"},{href:"https://jinja.palletsprojects.com/"}),"jinja2")," template that is used to override the standard RTMP stream URL (e.g. for use with reverse proxies). This option is only shown to users who have ",Object(i.b)("a",Object(n.a)({parentName:"td"},{href:"https://www.home-assistant.io/blog/2019/07/17/release-96/#advanced-mode"}),"advanced mode")," enabled. See ",Object(i.b)("a",Object(n.a)({parentName:"td"},{href:"#streams"}),"RTMP streams")," below.")))),Object(i.b)("h2",{id:"entities-provided"},"Entities Provided"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Platform"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"camera")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Live camera stream (requires RTMP), camera for image of the last detected object.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"sensor")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"States to monitor Frigate performance, object counts for all zones and cameras.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"switch")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Switch entities to toggle detection, clips and snapshots.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"binary_sensor")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),'A "motion" binary sensor entity per camera/zone/object.')))),Object(i.b)("h2",{id:"media-browser-support"},"Media Browser Support"),Object(i.b)("p",null,"The integration provides:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Rich UI with thumbnails for browsing event clips"),Object(i.b)("li",{parentName:"ul"},"Rich UI for browsing 24/7 recordings by month, day, camera, time")),Object(i.b)("p",null,'This is accessible via "Media Browser" on the left menu panel in Home Assistant.'),Object(i.b)("a",{name:"api"}),"## API",Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Notification API with public facing endpoints for images in notifications")),Object(i.b)("h3",{id:"notifications"},"Notifications"),Object(i.b)("p",null,"Frigate publishes event information in the form of a change feed via MQTT. This\nallows lots of customization for notifications to meet your needs. Event changes\nare published with ",Object(i.b)("inlineCode",{parentName:"p"},"before")," and ",Object(i.b)("inlineCode",{parentName:"p"},"after")," information as shown\n",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"#frigateevents"}),"here"),". Note that some people may not want to expose frigate to\nthe web, so you can leverage the HA API that frigate custom_integration ties\ninto (which is exposed to the web, and thus can be used for mobile notifications\netc):"),Object(i.b)("p",null,"To load an image taken by frigate from Home Assistants API see below:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"https://HA_URL/api/frigate/notifications/<event-id>/thumbnail.jpg\n")),Object(i.b)("p",null,"To load a video clip taken by frigate from Home Assistants API :"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"https://HA_URL/api/frigate/notifications/<event-id>/<camera>/clip.mp4\n")),Object(i.b)("p",null,'Here is a simple example of a notification automation of events which will update the existing notification for each change. This means the image you see in the notification will update as frigate finds a "better" image.'),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),'automation:\n  - alias: Notify of events\n    trigger:\n      platform: mqtt\n      topic: frigate/events\n    action:\n      - service: notify.mobile_app_pixel_3\n        data_template:\n          message: \'A {{trigger.payload_json["after"]["label"]}} was detected.\'\n          data:\n            image: \'https://your.public.hass.address.com/api/frigate/notifications/{{trigger.payload_json["after"]["id"]}}/thumbnail.jpg?format=android\'\n            tag: \'{{trigger.payload_json["after"]["id"]}}\'\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),"automation:\n  - alias: When a person enters a zone named yard\n    trigger:\n      platform: mqtt\n      topic: frigate/events\n    condition:\n      - \"{{ trigger.payload_json['after']['label'] == 'person' }}\"\n      - \"{{ 'yard' in trigger.payload_json['after']['entered_zones'] }}\"\n    action:\n      - service: notify.mobile_app_pixel_3\n        data_template:\n          message: \"A {{trigger.payload_json['after']['label']}} has entered the yard.\"\n          data:\n            image: \"https://url.com/api/frigate/notifications/{{trigger.payload_json['after']['id']}}/thumbnail.jpg\"\n            tag: \"{{trigger.payload_json['after']['id']}}\"\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),"- alias: When a person leaves a zone named yard\n  trigger:\n    platform: mqtt\n    topic: frigate/events\n  condition:\n    - \"{{ trigger.payload_json['after']['label'] == 'person' }}\"\n    - \"{{ 'yard' in trigger.payload_json['before']['current_zones'] }}\"\n    - \"{{ not 'yard' in trigger.payload_json['after']['current_zones'] }}\"\n  action:\n    - service: notify.mobile_app_pixel_3\n      data_template:\n        message: \"A {{trigger.payload_json['after']['label']}} has left the yard.\"\n        data:\n          image: \"https://url.com/api/frigate/notifications/{{trigger.payload_json['after']['id']}}/thumbnail.jpg\"\n          tag: \"{{trigger.payload_json['after']['id']}}\"\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),"- alias: Notify for dogs in the front with a high top score\n  trigger:\n    platform: mqtt\n    topic: frigate/events\n  condition:\n    - \"{{ trigger.payload_json['after']['label'] == 'dog' }}\"\n    - \"{{ trigger.payload_json['after']['camera'] == 'front' }}\"\n    - \"{{ trigger.payload_json['after']['top_score'] > 0.98 }}\"\n  action:\n    - service: notify.mobile_app_pixel_3\n      data_template:\n        message: \"High confidence dog detection.\"\n        data:\n          image: \"https://url.com/api/frigate/notifications/{{trigger.payload_json['after']['id']}}/thumbnail.jpg\"\n          tag: \"{{trigger.payload_json['after']['id']}}\"\n")),Object(i.b)("p",null,"If you are using telegram, you can fetch the image directly from Frigate:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),'automation:\n  - alias: Notify of events\n    trigger:\n      platform: mqtt\n      topic: frigate/events\n    action:\n      - service: notify.telegram_full\n        data_template:\n          message: \'A {{trigger.payload_json["after"]["label"]}} was detected.\'\n          data:\n            photo:\n              # this url should work for addon users\n              - url: \'http://ccab4aaf-frigate:5000/api/events/{{trigger.payload_json["after"]["id"]}}/thumbnail.jpg\'\n                caption: \'A {{trigger.payload_json["after"]["label"]}} was detected on {{ trigger.payload_json["after"]["camera"] }} camera\'\n')),Object(i.b)("a",{name:"streams"}),"## RTMP stream",Object(i.b)("p",null,"In order for the live streams to function they need to be accessible on the RTMP\nport (default: ",Object(i.b)("inlineCode",{parentName:"p"},"1935"),") at ",Object(i.b)("inlineCode",{parentName:"p"},"<frigatehost>:1935"),". Home Assistant will directly\nconnect to that streaming port when the live camera is viewed."),Object(i.b)("h4",{id:"rtmp-url-template"},"RTMP URL Template"),Object(i.b)("p",null,"For advanced usecases, this behavior can be changed with the ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"#options"}),"RTMP URL\ntemplate")," option. When set, this string will override the default stream\naddress that is derived from the default behavior described above. This option supports\n",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://jinja.palletsprojects.com/"}),"jinja2 templates")," and has the ",Object(i.b)("inlineCode",{parentName:"p"},"camera")," dict\nvariables from ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://blakeblackshear.github.io/frigate/usage/api#apiconfig"}),"Frigate API"),"\navailable for the template. Note that no Home Assistant state is available to the\ntemplate, only the camera dict from Frigate."),Object(i.b)("p",null,"This is potentially useful when Frigate is behind a reverse proxy, and/or when\nthe default stream port is otherwise not accessible to Home Assistant (e.g.\nfirewall rules)."),Object(i.b)("h6",{id:"rtmp-url-template-examples"},"RTMP URL Template Examples"),Object(i.b)("p",null,"Use a different port number:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"rtmp://<frigate_host>:2000/live/front_door\n")),Object(i.b)("p",null,"Use the camera name in the stream URL:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"rtmp://<frigate_host>:2000/live/{{ name }}\n")),Object(i.b)("p",null,"Use the camera name in the stream URL, converting it to lowercase first:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"rtmp://<frigate_host>:2000/live/{{ name|lower }}\n")),Object(i.b)("h2",{id:"multiple-instance-support"},"Multiple Instance Support"),Object(i.b)("p",null,"The Frigate integration seamlessly supports the use of multiple Frigate servers. "),Object(i.b)("h3",{id:"requirements-for-multiple-instances"},"Requirements for Multiple Instances"),Object(i.b)("p",null,"In order for multiple Frigate instances to function correctly, the\n",Object(i.b)("inlineCode",{parentName:"p"},"topic_prefix")," and ",Object(i.b)("inlineCode",{parentName:"p"},"client_id")," parameters must be set differently per server.\nSee ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://blakeblackshear.github.io/frigate/configuration/index#mqtt"}),"MQTT\nconfiguration"),"\nfor how to set these."),Object(i.b)("h4",{id:"api-urls"},"API URLs"),Object(i.b)("p",null,"When multiple Frigate instances are configured, ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"#api"}),"API")," URLs should include an\nidentifier to tell Home Assistant which Frigate instance to refer to. The\nidentifier used is the MQTT ",Object(i.b)("inlineCode",{parentName:"p"},"client_id")," paremeter included in the configuration,\nand is used like so:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"https://HA_URL/api/frigate/<client-id>/notifications/<event-id>/thumbnail.jpg\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"https://HA_URL/api/frigate/<client-id>/clips/front_door-1624599978.427826-976jaa.mp4\n")),Object(i.b)("h4",{id:"default-treatment"},"Default Treatment"),Object(i.b)("p",null,"When a single Frigate instance is configured, the ",Object(i.b)("inlineCode",{parentName:"p"},"client-id")," parameter need not\nbe specified in URLs/identifiers -- that single instance is assumed. When\nmultiple Frigate instances are configured, the user ",Object(i.b)("strong",{parentName:"p"},"must")," explicitly specify\nwhich server they are referring to."))}c.isMDXComponent=!0},99:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return u}));var n=a(0),r=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var b=r.a.createContext({}),c=function(e){var t=r.a.useContext(b),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=c(e.components);return r.a.createElement(b.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,b=s(e,["components","mdxType","originalType","parentName"]),p=c(a),d=n,u=p["".concat(o,".").concat(d)]||p[d]||m[d]||i;return a?r.a.createElement(u,l(l({ref:t},b),{},{components:a})):r.a.createElement(u,l({ref:t},b))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,o[1]=l;for(var b=2;b<i;b++)o[b]=a[b];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"}}]);